"""
Django settings for alertrix_deployment project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import datetime
import logging
import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = Path(os.getenv('DJANGO_DATA_DIR', BASE_DIR / 'data'))


# SECURITY WARNING: keep the secret key used in production secret!
DEFAULT_SECRET_KEY_PATH = '/run/secrets/django_secret_key'
SECRET_KEY_PATH = os.getenv('DJANGO_SECRET_KEY_PATH', DEFAULT_SECRET_KEY_PATH)

if SECRET_KEY_PATH is not None and os.path.exists(SECRET_KEY_PATH):
    with open(SECRET_KEY_PATH, 'r') as file:
        SECRET_KEY = file.read()
elif os.getenv('DJANGO_SECRET_KEY', None) is not None:
    logging.warning(
        'You should use a secret named "django_secret_key" or at least a file instead of a plain environment',
    )
    SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
else:
    logging.warning(
        'No SECRET_KEY for django provided',
    )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG') in ['true', 'True', '1']

ALLOWED_HOSTS = (os.getenv('DJANGO_ALLOWED_HOSTS', '')).split(',') or [
    '*',
]

USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True

# Content Security Policy

CSP_FRAME_ANCESTORS = list([
    fa
    for fa in (os.getenv('CSP_FRAME_ANCESTOR') or '').split(',')
    if os.getenv('CSP_FRAME_ANCESTOR') is not None
]) or (
    "'self'",
    'vector://vector'
)

CSP_IMG_SRC = list([
    fa
    for fa in (os.getenv('CSP_IMG_SRC') or '').split(',')
    if os.getenv('CSP_IMG_SRC') is not None
]) or (
    "'self'",
)

CSP_STYLE_SRC = list([
    fa
    for fa in (os.getenv('CSP_STYLE_SRC') or '').split(',')
    if os.getenv('CSP_STYLE_SRC') is not None
]) or (
    "'self'",
)

CSP_SCRIPT_SRC = list([
    fa
    for fa in (os.getenv('CSP_SCRIPT_SRC') or '').split(',')
    if os.getenv('CSP_SCRIPT_SRC') is not None
]) or (
    "'self'",
)

SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True

CSRF_TRUSTED_ORIGINS = (
    [
        'https://' + host
        for host in ALLOWED_HOSTS
    ]
    if os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS') is None else
    os.getenv('DJANGO_CSRF_TRUSTED_ORIGINS').split(',')
)
# Allow the csrf cookie to be set when embedded in an iframe. Relies on protection by CSP.
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SECURE = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'matrixappservice',
    'matrixappservice.database',
    'alertrix',
    'alertrix.accounts',
]

MIDDLEWARE = [
    'csp.middleware.CSPMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'alertrix.middleware.WidgetWatcher',
    'matrixappservice.middleware.MatrixResponseHandler',
]

ROOT_URLCONF = 'alertrix_deployment.urls'
ROOT_MATRIXCONF = 'alertrix.matrix_callbacks'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'alertrix.context_processors.service_name',
                'alertrix.context_processors.emoticons',
            ],
        },
    },
]

WSGI_APPLICATION = 'alertrix_deployment.wsgi.application'


# Database
DATABASE_TYPE = os.getenv('DATABASE_TYPE') or 'postgres'
DATABASES = None
if DATABASE_TYPE == 'postgres':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.getenv('DATABASE_NAME'),
            'USER': os.getenv('DATABASE_USER'),
            'PASSWORD': os.getenv('DATABASE_PASSWORD'),
            'HOST': os.getenv('DATABASE_HOST') or 'localhost',
            'PORT': os.getenv('DATABASE_PORT') or '5432',
        },
    }
if DATABASE_TYPE == 'file':
    DATABASE_FILE_NAME = os.getenv('DATABASE_FILE_NAME', 'db.sqlite3')
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': DATA_DIR / DATABASE_FILE_NAME,
        },
    }
if DATABASES is None:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': DATA_DIR / 'db.sqlite3',
        },
    }


AUTH_USER_MODEL = 'alertrix.user'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = '/'


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LOCALE_PATHS = [
    BASE_DIR / 'locale/',
]

LANGUAGES = [
    ("en", _("English")),
    ("de", _("German")),
]

LANGUAGE_CODE = 'de'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT', '/var/www/static/')
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ALERTRIX_VERSION = '0'

ACCOUNTS_REGISTRATION_TOKEN_DURATION = datetime.timedelta(seconds=int(os.getenv('ALERTRIX_SLUG_MAX_LENGTH') or 0)) or datetime.timedelta(minutes=5)

ALERTRIX_SLUG_MAX_LENGTH = os.getenv('ALERTRIX_SLUG_MAX_LENGTH') or 128

ALERTRIX_WIDGET_SCHEME = os.getenv('ALERTRIX_WIDGET_SCHEME') or 'https'

ALERTRIX_WIDGET_HOST = os.getenv('ALERTRIX_WIDGET_HOST')

ALERTRIX_ENFORCE_ENCRYPTION = os.getenv('ALERTRIX_ENFORCE_ENCRYPTION') or True

ALERTRIX_UNIT_EMOTICON = os.getenv('ALERTRIX_UNIT_EMOTICON') or 'üö®'

ALERTRIX_COMPANY_EMOTICON = os.getenv('ALERTRIX_COMPANY_EMOTICON') or 'üè†'

ALERTRIX_EVENT_PREFIX = os.getenv('ALERTRIX_EVENT_PREFIX') or 'net.alertrix'

ALERTRIX_MESSAGE_EVENT_PREFIX = os.getenv('ALERTRIX_MESSAGE_EVENT_PREFIX') or ALERTRIX_EVENT_PREFIX

ALERTRIX_STATE_EVENT_PREFIX = os.getenv('ALERTRIX_MESSAGE_EVENT_PREFIX') or ALERTRIX_EVENT_PREFIX

ALERTRIX_COMMAND_PREFIX = os.getenv('ALERTRIX_COMMAND_PREFIX') or '!'
ALERTRIX_COMMAND_NAME = os.getenv('ALERTRIX_COMMAND_NAME') or 'alertrix'

APPSERVICE_CLIENT_STORE_PATH = str(os.getenv('MATRIX_CLIENT_STORE_PATH', DATA_DIR / 'matrix'))

MATRIX_VALIDATED_GROUP_NAME = os.getenv('MATRIX_VALIDATED_GROUP_NAME') or 'validated_matrix_id'

MATRIXAPPSERVICE_HOMESERVER_DEFAULT_SCHEME = os.getenv('MATRIXAPPSERVICE_HOMESERVER_DEFAULT_SCHEME') or 'https'

MATRIXAPPSERVICE_HOMESERVER_DISCOVERY_N_REDIRECTS = os.getenv('MATRIXAPPSERVICE_HOMESERVER_DISCOVERY_N_REDIRECTS') or 10

MATRIX_SYNC_N = 2

MATRIX_SYNC_TIMEOUT = 1

SERVICE_NAME = os.getenv('SERVICE_NAME') or 'alertrix'
